---
- name: create default realm
  command: "{{ container_exec_cmd }} radosgw-admin realm create --rgw-realm={{ item.realm }} --default"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  run_once: true
  with_items: "{{ realms }}"
  when: 
    - realms is defined
    - realms|length == 1

- name: create the realm(s)
  command: "{{ container_exec_cmd }} radosgw-admin realm create --rgw-realm={{ item.realm }}"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  run_once: true
  with_items: "{{ realms }}"
  when: 
    - realms is defined
    - realms|length > 1

- name: create default master zonegroup(s)
  command: "{{ container_exec_cmd }} radosgw-admin zonegroup create --rgw-realm={{ item.realm }} --rgw-zonegroup={{ item.zonegroup }} --endpoints={{ item.endpoint }} --default --master"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  run_once: true
  with_items: "{{ zonegroups }}"
  when: 
    - zonegroups is defined
    - item.is_default == true and item.is_master == true

- name: create default zonegroup(s)
  command: "{{ container_exec_cmd }} radosgw-admin zonegroup create --rgw-realm={{ item.realm }} --rgw-zonegroup={{ item.zonegroup }} --endpoints={{ item.endpoint }} --default"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  run_once: true
  with_items: "{{ zonegroups }}"
  when: 
    - zonegroups is defined
    - item.is_default == true and item.is_master == false

- name: create master zonegroup(s)
  command: "{{ container_exec_cmd }} radosgw-admin zonegroup create --rgw-realm={{ item.realm }} --rgw-zonegroup={{ item.zonegroup }} --endpoints={{ item.endpoint }} --master"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  run_once: true
  with_items: "{{ zonegroups }}"
  when: 
    - zonegroups is defined
    - item.is_default == false and item.is_master == true

- name: create non-master non-default zonegroup(s)
  command: "{{ container_exec_cmd }} radosgw-admin zonegroup create --rgw-realm={{ item.realm }} --rgw-zonegroup={{ item.zonegroup }} --endpoints={{ item.endpoint }}"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  run_once: true
  with_items: "{{ zonegroups }}"
  when: 
    - zonegroups is defined
    - item.is_default == false and item.is_master == false

- name: create the default master zone
  command: "{{ container_exec_cmd }} radosgw-admin zone create --rgw-realm={{ item.realm }} --rgw-zonegroup={{ item.zonegroup }} --rgw-zone={{ item.zone }} --endpoints={{ item.endpoint }} --access-key={{ item.access_key }} --secret={{ item.secret_key }} --master --default"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  run_once: true
  with_items: "{{ zones }}"
  when: 
    - zones is defined
    - item.is_master == true and item.is_default == true

- name: create the default zone
  command: "{{ container_exec_cmd }} radosgw-admin zone create --rgw-realm={{ item.realm }} --rgw-zonegroup={{ item.zonegroup }} --rgw-zone={{ item.zone }} --endpoints={{ item.endpoint }} --access-key={{ item.access_key }} --secret={{ item.secret_key }} --default"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  run_once: true
  with_items: "{{ zones }}"
  when: 
    - zones is defined
    - item.is_master == false and item.is_default == true

- name: create the master zone(s)
  command: "{{ container_exec_cmd }} radosgw-admin zone create --rgw-realm={{ item.realm }} --rgw-zonegroup={{ item.zonegroup }} --rgw-zone={{ item.zone }} --endpoints={{ item.endpoint }} --access-key={{ item.access_key }} --secret={{ item.secret_key }} --master"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  run_once: true
  with_items: "{{ zones }}"
  when: 
    - zones is defined
    - item.is_master == true and item.is_default == false

- name: include_tasks create_master_zone_user.yml
  include_tasks: create_master_zone_user.yml

- name: add other endpoints to the zone
  command: "{{ container_exec_cmd }} radosgw-admin zone modify --rgw-realm={{ rgw_realm }} --rgw-zonegroup={{ rgw_zonegroup }} --rgw-zone={{ rgw_zone }} --endpoints {{ rgw_multisite_endpoints_list }}"
  delegate_to: "{{ groups[mon_group_name][0] }}"
  when: rgw_multisite_endpoints_list is defined
  notify: update period
